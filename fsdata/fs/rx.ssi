<!DOCTYPE html>
<html>
	<head>
		<title>RX Control Panel</title>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/siimple/2.0.0/siimple.min.css">
		<link rel="shortcut icon" href="img/favicon.png">
		<style>
			.fade {
				opacity:    0.5; 
				background: black; 
				width:      100%;
				height:     100%; 
				z-index:    10;
				top:        0; 
				left:       0; 
				position:   fixed;
			}
		</style>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
		<script language="javascript">
			const MSG_PROBE_TX				="MSG_PROBE_TX";
			const MSG_SET_TX				="MSG_SET_TX"
			const MSG_GET_TX				="MSG_GET_TX";
			const MSG_PREV_TX				="MSG_PREV_TX";
			const MSG_NEXT_TX				="MSG_NEXT_TX";
			const MSG_SET_CHANNEL			="MSG_SET_CHANNEL"
			const MSG_GET_CHANNEL			="MSG_GET_CHANNEL";
			const MSG_PREV_CHANNEL			="MSG_PREV_CHANNEL";
			const MSG_NEXT_CHANNEL			="MSG_NEXT_CHANNEL";
			const MSG_SET_VOLUME			="MSG_SET_VOLUME";
			const MSG_GET_VOLUME			="MSG_GET_VOLUME";
			const MSG_SET_UNMUTE			="MSG_SET_UNMUTE";
			const MSG_GET_UNMUTE			="MSG_GET_UNMUTE";
			const MSG_PROBE_TX_REPLY		="MSG_PROBE_TX_REPLY";
			const MSG_SET_TX_REPLY			="MSG_SET_TX_REPLY"
			const MSG_GET_TX_REPLY			="MSG_GET_TX_REPLY";
			const MSG_PREV_TX_REPLY			="MSG_PREV_TX_REPLY";
			const MSG_NEXT_TX_REPLY			="MSG_NEXT_TX_REPLY";
			const MSG_SET_CHANNEL_REPLY		="MSG_SET_CHANNEL_REPLY"
			const MSG_GET_CHANNEL_REPLY		="MSG_GET_CHANNEL_REPLY";
			const MSG_PREV_CHANNEL_REPLY	="MSG_PREV_CHANNEL_REPLY";
			const MSG_NEXT_CHANNEL_REPLY	="MSG_NEXT_CHANNEL_REPLY";
			const MSG_SET_VOLUME_REPLY		="MSG_SET_VOLUME_REPLY";
			const MSG_GET_VOLUME_REPLY		="MSG_GET_VOLUME_REPLY";
			const MSG_SET_UNMUTE_REPLY		="MSG_SET_UNMUTE_REPLY";
			const MSG_GET_UNMUTE_REPLY		="MSG_GET_UNMUTE_REPLY";
		
			var g_webSocket=null;
			var g_fadeWD=0;
			var g_tx=[];
			var g_txProbeWD=null;

			function fade(timeout) {
				$('#divFade').css("visibility", "visible");
				g_fadeWD=setTimeout(function(){
					location.reload();
					console.log("Fade watchdog is triggered.");
				}, timeout);
			}
			
			function noFade() {
				clearTimeout(g_fadeWD);
				g_fadeWD=0;
				$('#divFade').css("visibility", "hidden");
			}

			function getParam(qstr, field) {
				var regex=new RegExp("[?&]"+field.replace(/[\[\]]/g, "\\$&")+"(=([^&#]*)|&|#|$)"),
					res=regex.exec(qstr);

				if(!res)
					return null;

				if(!res[2])
					return '';

				return decodeURIComponent(res[2].replace(/\+/g, " "));
			}
			
			window.addEventListener("load", function () {
				g_webSocket=new WebSocket("ws://"+window.location.hostname+"/CmdSvr.ws");

				g_webSocket.onopen=function(evt) {
					console.log("onopen");
				};

				g_webSocket.onclose=function(evt) {
					console.log("onclose");
				};
				
				g_webSocket.onmessage=function(evt) {
					var arr=evt.data.split(",");
					var msg=arr[0];
					var arg=null;
					
					if(arr.length>1)
						arg=arr[1].split(";");
				
					switch(msg) {
						case "MSG_PROBE_TX_REPLY": {
							var oldTX=!g_tx.length?"":g_tx[$('#inpTX').val()];
						
							g_tx=[];
							arg.forEach(function(item, idx) {
								var tmp=item.split(":");
								
								if(tmp.length>=2)
									g_tx.push({
										name: tmp[0],
										channel: tmp[1]
									});
							});
							
							$('#inpTX').prop("min", 0);
							$('#inpTX').prop("max", g_tx.length-1);
							$('#txtTX').html("");
							$('#txtCh').html("");
							
							g_tx.forEach(function(item, idx) {
								if(item.name==oldTX.name) {
									$('#inpTX').val(idx);
									$('#txtTX').html(item.name);
									$('#txtCh').html(item.channel);
									
									if(item.channel!=oldTX.channel) {
										g_webSocket.send(MSG_SET_CHANNEL+","+$('#txtCh').html());
										fade(5000);
									}
								}
							});
							break;
						}

						case "MSG_SET_TX_REPLY":
							break;

						case "MSG_GET_TX_REPLY":
							break;
							
						case "MSG_PREV_TX_REPLY":
							noFade();
							break;

						case "MSG_NEXT_TX_REPLY":
							noFade();
							break;

						case "MSG_SET_CHANNEL_REPLY":
							noFade();
							break;

						case "MSG_GET_CHANNEL_REPLY":
							break;

						case "MSG_PREV_CHANNEL_REPLY":
							break;

						case "MSG_NEXT_CHANNEL_REPLY":
							break;

						case "MSG_SET_VOLUME_REPLY":
							$('#txtVol').html(arg[0]);
							$('#inpVol').val(arg[0]);
							noFade();
							break;

						case "MSG_GET_VOLUME_REPLY":
							noFade();
							break;

						case "MSG_SET_UNMUTE_REPLY":
							$('#inpMute').prop("checked", arg[0]=="0"?true:false);
							$('#inpVol').prop("disabled", arg[0]=="0"?true:false);
							noFade();
							break;

						case "MSG_GET_UNMUTE_REPLY":
							noFade();
							break;

						default:
							break;
					}
				};
				
				g_webSocket.onerror=function(evt) {
					console.log("onerror");
				};
				
				g_txProbeWD=setInterval(function() {
					g_webSocket.send(MSG_PROBE_TX);
				}, 10000);
			});

			function onTX() {
				g_webSocket.send(MSG_SET_CHANNEL+","+$('#txtCh').html());
				$('#txtTX').html(g_tx[$('#inpTX').val()].name);
				$('#txtCh').html(g_tx[$('#inpTX').val()].channel);
				fade(5000);
			}

			function onVol() {
				$('#txtVol').html($('#inpVol').val());
				g_webSocket.send(MSG_SET_VOLUME+","+$('#inpVol').val());
				fade(5000);
			}
			
			function onMute() {
				$('#inpVol').prop("disabled", !$('#inpMute').prop("checked"));
				g_webSocket.send(MSG_SET_UNMUTE+","+($('#inpMute').prop("checked")?255:0));
				fade(5000);
			}
		</script>
	</head>
	
	<body>
		<div class="siimple-grid" style="font-weight: 700">
			<div class="siimple-grid-row">
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--teal">Version</div>
				<div class="siimple-grid-col siimple-grid-col--11 siimple-color--teal siimple-bg--grey">
					<!--#version-->
				</div>
			</div>
			<div class="siimple-grid-row">
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--blue">AP</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--blue siimple-bg--grey">
					<!--#ap-->
				</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--blue">IP</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--blue siimple-bg--grey">
					<!--#ip-->
				</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--blue">Netmask</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--blue siimple-bg--grey">
					<!--#netmask-->
				</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--blue">Gateway</div>
				<div class="siimple-grid-col siimple-grid-col--5 siimple-color--blue siimple-bg--grey">
					<!--#gateway-->
				</div>
			</div>
			<div class="siimple-grid-row">
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--navy">TX Name</div>
				<div class="siimple-grid-col siimple-grid-col--3 siimple-color--navy siimple-bg--grey" style="padding-top: 0.8%">
					<input id="inpTX" type="range" min="0" max="0" value="0" onmouseup="onTX()"/>
					<label id="txtTX" style="display: inline-block"></label>
				</div>
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--navy">Channel</div>
				<div id="txtCh" class="siimple-grid-col siimple-grid-col--7 siimple-color--navy siimple-bg--grey"></div>
			</div>
			<div class="siimple-grid-row">
				<div class="siimple-grid-col siimple-grid-col--1 siimple-color--grey siimple-bg--navy">Volume</div>
				<div class="siimple-grid-col siimple-grid-col--11 siimple-color--navy siimple-bg--grey" style="padding-top: 0.8%">
					<input id="inpVol" type="range" min="1" max="15" value="1" onmouseup="onVol()"/>
					<label id="txtVol" style="display: inline-block">1</label>
					<input id="inpMute" type="checkbox" onmouseup="onMute()"/>Mute
				</div>
			</div>
		</div>
		<div id="divFade" class="fade" style="visibility: hidden"></div>
	</body>
</html>
