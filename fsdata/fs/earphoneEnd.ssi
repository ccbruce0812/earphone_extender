<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" href="img/favicon.png">
		<title>HTTP Server</title>
		<link rel="stylesheet" type="text/css" href="style/style.css">
		<style>
			.fade {
				opacity:    0.5;
				background: black;
				width:      100%;
				height:     100%;
				z-index:    10;
				top:        0;
				left:       0;
				position:   fixed;
			}
		</style>
		<!--<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>-->
		<script src="script/jquery_3.1.1.min.js"></script>
		<script language="javascript">
			const MSG_GET_STA_LIST			="MSG_GET_STA_LIST";
			const MSG_SET_STA				="MSG_SET_STA";
			const MSG_GET_STA				="MSG_GET_STA";
			const MSG_SET_VOLUME			="MSG_SET_VOLUME";
			const MSG_GET_VOLUME			="MSG_GET_VOLUME";
			const MSG_SET_UNMUTE			="MSG_SET_UNMUTE";
			const MSG_GET_UNMUTE			="MSG_GET_UNMUTE";
		
			var g_webSocket=null;
			var g_fadeWD=0;
			var g_probeWD=null;

			function getParam(qstr, field) {
				var regex=new RegExp("[?&]"+field.replace(/[\[\]]/g, "\\$&")+"(=([^&#]*)|&|#|$)"),
					res=regex.exec(qstr);

				if(!res)
					return null;

				if(!res[2])
					return '';

				return decodeURIComponent(res[2].replace(/\+/g, " "));
			}
			
			function fade(timeout) {
				$('#divFade').css("visibility", "visible");
				g_fadeWD=setTimeout(function(){
					location.reload();
					console.log("Fade watchdog is triggered.");
				}, timeout);
			}
			
			function noFade() {
				clearTimeout(g_fadeWD);
				g_fadeWD=0;
				$('#divFade').css("visibility", "hidden");
			}
			
			function Init(handler, limit, action) {
				this.m_count=limit;
				this.m_callback=function(evt) {
					handler(evt);

					if(!--this.m_count)
						action();
				}.bind(this);
			}
			
			function onWSMsgInit(evt) {
				var arr=evt.data.split(",");
				var msg=arr[0];
				var arg=null;
				
				if(arr.length>1)
					arg=arr[1].split(";");
					
				if(arg[0]>=0) {
					arg.shift();
					switch(msg) {
						case "MSG_GET_STA_LIST_REPLY": {
							var obj=$('#inpSta'),
								now=obj.val();
								found=false;
								
							obj.html("");
							arg.forEach(function(item, index) {
								if(item=="")
									return;
								if(item==now)
									found=true;
								obj.append('<option value="'+item+'">'+item+'</option>');
							});
							
							obj.val(found?now:"none");
							break;
						}

						case "MSG_GET_STA_REPLY": {
							var obj=$('#inpSta'),
								obj2=$('#txtCh');
							
							obj.val(arg[0]);
							obj2.html(arg[1]<0?"N/A":(Number(arg[1])/1000).toFixed(2)+"MHz");
							break;
						}
						
						case "MSG_GET_VOLUME_REPLY": {
							var obj=$('#inpVol');
							
							obj.val(arg[0]);
							syncVol();
							break;
						}

						case "MSG_GET_UNMUTE_REPLY": {
							var obj=$('#inpMute');

							obj.prop("checked", !Number(arg[0])?true:false);
							syncMute();
							break;
						}

						default:
							console.log("Unsupported message received. '"+evt.data+"'");
							break;
					}
				} else
					console.log("Unqualified message received. '"+evt.data+"'");
			}
			
			function onWSMsg(evt) {
				var arr=evt.data.split(",");
				var msg=arr[0];
				var arg=null;
				
				if(arr.length>1)
					arg=arr[1].split(";");
					
				if(arg[0]>=0) {
					arg.shift();
					switch(msg) {
						case "MSG_GET_STA_LIST_REPLY": {
							var obj=$('#inpSta'),
								now=obj.val();
								found=false;

							obj.html("");
							arg.forEach(function(item, index) {
								if(item=="")
									return;
								if(item==now)
									found=true;
								obj.append('<option value="'+item+'">'+item+'</option>');
							});
							
							obj.val(found?now:"none");
							break;
						}
					
						case "MSG_SET_STA_REPLY": {
							var obj=$('#txtCh');
						
							obj.html(arg[0]<0?"N/A":(Number(arg[0])/1000).toFixed(2)+"MHz");
							noFade();
							break;
						}

						case "MSG_SET_VOLUME_REPLY":
						case "MSG_SET_UNMUTE_REPLY": {
							noFade();
							break;
						}
						
						default:
							console.log("Unsupported message received. '"+evt.data+"'");
							break;
					}
				} else
					console.log("Unqualified message received. '"+evt.data+"'");
			}
			
			window.addEventListener("load", function () {
				var init=new Init(onWSMsgInit, 4, function() {
					g_webSocket.onmessage=onWSMsg;
				
					g_probeWD=setInterval(function() {
						g_webSocket.send(MSG_GET_STA_LIST);
					}, 10000);
					
					noFade();
				});
				
				g_webSocket=new WebSocket("ws://"+window.location.hostname+"/CmdSvr.ws");

				g_webSocket.onopen=function(evt) {
					g_webSocket.send(MSG_GET_STA_LIST);
					g_webSocket.send(MSG_GET_STA);
					g_webSocket.send(MSG_GET_VOLUME);
					g_webSocket.send(MSG_GET_UNMUTE);
				};

				g_webSocket.onclose=function(evt) {
					console.log("onclose");
				};

				g_webSocket.onerror=function(evt) {
					console.log("onerror");
				};
				
				g_webSocket.onmessage=init.m_callback;
			});

			function onSta() {
				var obj=$('#inpSta');
			
				g_webSocket.send(MSG_SET_STA+","+obj.val());
				fade(5000);
			}

			function syncVol() {
				var obj0=$('#inpVol'),
					obj1=$('#txtVol');
					
				obj1.html(obj0.val());
			}
			
			function onVol() {
				var obj=$('#inpVol');
				
				g_webSocket.send(MSG_SET_VOLUME+","+obj.val());
				syncVol();
				fade(5000);
			}
			
			function syncMute() {
				var obj0=$('#inpMute'),
					obj1=$('#inpVol');
				
				obj1.prop("disabled", obj0.prop("checked"));
			}
			
			function onMute() {
				var obj=$('#inpMute');
			
				g_webSocket.send(MSG_SET_UNMUTE+","+(obj.prop("checked")?0:-1));
				syncMute();
				fade(5000);
			}
		</script>
	</head>
	
	<body>
		<div class="header black-white">Home
			<div style="float: right">
				<div style="font-size: 12px; display: inline-block">Home</div>&nbsp|
				<a style="font-size: 12px" href="/info.ssi">System Information</a>&nbsp|
				<a style="font-size: 12px" href="/setWiFi.ssi?showLinks=1">Setting</a>
			</div>
		</div>
		<div class="main gray-white">
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Station</div>
				<div class="grid gray-white" style="width: 69%; float: right">
					<select class="list" id="inpSta" onchange="onSta()">
						<option value="none">none</option>
					</select>
				</div>
			</div>
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Channel</div>
				<div class="grid gray-white" style="width: 69%; float: right; text-align: right" id="txtCh">N/A</div>
			</div>
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Volume</div>
				<div class="grid gray-white" style="width: 69%; float: right; text-align: right" id="txtVol">1</div>
                <div class="grid gray-white" style="width: 100%; clear: left; margin-top: 5px">
                	<input class="slider" style="width: 80%" id="inpVol" type="range" min="1" max="15" value="1" onchange="onVol()">
                	<input id="inpMute" type="checkbox" onchange="onMute()">Mute
                </div>
			</div>
		</div>
		<div id="divFade" class="fade" style="visibility: visible"></div>
	</body>
</html>
