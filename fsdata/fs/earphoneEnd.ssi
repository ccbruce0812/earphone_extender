<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" href="img/favicon.png">
		<title>HTTP Server</title>
		<link rel="stylesheet" type="text/css" href="style/style.css">
		<style>
			.fade {
				opacity:    0.5;
				background: black;
				width:      100%;
				height:     100%;
				z-index:    10;
				top:        0;
				left:       0;
				position:   fixed;
			}
		</style>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
		<script language="javascript">
			const MSG_GET_STA_LIST			="MSG_GET_STA_LIST";
			const MSG_SET_STA				="MSG_SET_STA";
			const MSG_SET_VOLUME			="MSG_SET_VOLUME";
			const MSG_GET_VOLUME			="MSG_GET_VOLUME";
			const MSG_SET_UNMUTE			="MSG_SET_UNMUTE";
			const MSG_GET_UNMUTE			="MSG_GET_UNMUTE";
		
			var g_webSocket=null;
			var g_fadeWD=0;
			var g_probeWD=null;

			function getParam(qstr, field) {
				var regex=new RegExp("[?&]"+field.replace(/[\[\]]/g, "\\$&")+"(=([^&#]*)|&|#|$)"),
					res=regex.exec(qstr);

				if(!res)
					return null;

				if(!res[2])
					return '';

				return decodeURIComponent(res[2].replace(/\+/g, " "));
			}
			
			function fade(timeout) {
				$('#divFade').css("visibility", "visible");
				g_fadeWD=setTimeout(function(){
					location.reload();
					console.log("Fade watchdog is triggered.");
				}, timeout);
			}
			
			function noFade() {
				clearTimeout(g_fadeWD);
				g_fadeWD=0;
				$('#divFade').css("visibility", "hidden");
			}
			
			window.addEventListener("load", function () {
				g_webSocket=new WebSocket("ws://"+window.location.hostname+"/CmdSvr.ws");

				g_webSocket.onopen=function(evt) {
					console.log("onopen");
				};

				g_webSocket.onclose=function(evt) {
					console.log("onclose");
				};

				g_webSocket.onerror=function(evt) {
					console.log("onerror");
				};
				
				g_webSocket.onmessage=function(evt) {
					var arr=evt.data.split(",");
					var msg=arr[0];
					var arg=null;
					
					if(arr.length>1)
						arg=arr[1].split(";");
						
					if(arg[0]>=0) {
						switch(msg) {
							case "MSG_GET_STA_LIST_REPLY": {
								var obj=$('#inpSta'),
									now=obj.val();
									found=false;

								obj.html("");
								arg.forEach(function(item, index) {
									if(item==now)
										found=true;
									obj.append('<option value="'+item+'">'+item+'</option>');
								});
								obj.html('<option value="none">none</option>');
								
								obj.val(found?now:"none");
								break;
							}

							case "MSG_SET_STA_REPLY": {
								var obj=$('#txtCh');
							
								obj.html(arg[1]);
								noFade();
								break;
							}

							case "MSG_GET_VOLUME_REPLY": {
								var obj=$('#inpVol');
								
								obj.val(arg[1]);
								syncVol();
								noFade();
								break;
							}

							case "MSG_GET_UNMUTE_REPLY": {
								var obj=$('#inpMute');
								
								obj.prop("checked", arg[1]=="0"?true:false);
								syncMute();
								noFade();
								break;
							}

							case "MSG_SET_VOLUME_REPLY":
							case "MSG_SET_UNMUTE_REPLY": {
								noFade();
								break;
							}
							
							default:
								console.log("Unsupported message received. '"+evt.data+"'");
								break;
						}
					} else
						console.log("Unqualified message received. '"+evt.data+"'");
				};
				
				g_probeWD=setInterval(function() {
					g_webSocket.send(MSG_GET_STA_LIST);
				}, 10000);
			});

			function onSta() {
				var obj=$('#inpSta');
			
				g_webSocket.send(MSG_SET_STA+","+obj.val());
				fade(5000);
			}

			function syncVol() {
				var obj0=$('#inpVol'),
					obj1=$('#txtVol');
					
				obj1.html(obj0.val());
			}
			
			function onVol() {
				var obj=$('#inpVol');
				
				g_webSocket.send(MSG_SET_VOLUME+","+obj.val());
				syncVol();
				fade(5000);
			}
			
			function syncMute() {
				var obj0=$('#inpMute'),
					obj1=$('#inpVol');
					
				obj1.prop("disabled", !obj0.prop("checked"));
			}
			
			function onMute() {
				var obj=$('#inpMute');
			
				g_webSocket.send(MSG_SET_UNMUTE+","+(obj.prop("checked")?-1:0));
				syncMute();
				fade(5000);
			}
		</script>
	</head>
	
	<body>
		<div class="header black-white">Home
			<div style="float: right">
				<a class="link" href="/<!--#page-->">Home</a>&nbsp|
				<a class="link" href="/info.ssi">System Information</a>&nbsp|
				<a class="link" href="/setWiFi.ssi">Setting</a>
			</div>
		</div>
		<div class="main gray-white">
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Station</div>
				<div class="grid gray-white" style="width: 69%; float: right">
					<select class="list" id="inpSta" onmouseup="onSta()">
						<option value="none">none</option>
					</select>
				</div>
			</div>
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Channel</div>
				<div class="grid gray-white" style="width: 69%; float: right; text-align: right" id="txtCh">96 MHz</div>
			</div>
			<div class="row light_gray-white">
				<div class="grid gray-white" style="width: 30%">Volume</div>
				<div class="grid gray-white" style="width: 69%; float: right; text-align: right" id="txtVol">1</div>
                <div class="grid gray-white" style="width: 100%; clear: left; margin-top: 5px">
                	<input class="slider" style="width: 80%" id="inpVol" type="range" min="1" max="15" value="1" onmouseup="onVol()">
                	<input id="inpMute" type="checkbox" onmouseup="onMute()">Mute
                </div>
			</div>
		</div>
		<div id="divFade" class="fade" style="visibility: hidden"></div>
	</body>
</html>
